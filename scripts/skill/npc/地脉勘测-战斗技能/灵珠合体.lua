---------------------------------------------------------------------->
-- 脚本名称:	scripts/skill/npc/地脉勘测-战斗技能/灵珠合体.lua
-- 更新时间:	2015/6/4 10:30:45
-- 更新用户:	xutong3
-- 脚本说明:
----------------------------------------------------------------------<
------------------------------------------------
-- 创建人   :  王洋
-- 创建时间	:  2007-12-11
-- 效果备注	:  默认的技能脚本
------------------------------------------------

--------------脚本文件开始------------------------------------------------
Include("scripts/Include/Skill.lh")
Include("scripts/Include/Player.lh")

tSkillData =
{
	{nDamageBase = 3, nDamageRand = 0, nCostMana = 0}, --level 1
	{nDamageBase = 0, nDamageRand = 0, nCostMana = 0}, --level 2
	{nDamageBase = 0, nDamageRand = 0, nCostMana = 0}, --level 3
	{nDamageBase = 0, nDamageRand = 0, nCostMana = 0}, --level 4
	{nDamageBase = 0, nDamageRand = 0, nCostMana = 0}, --level 5
	{nDamageBase = 0, nDamageRand = 0, nCostMana = 0}, --level 6
	{nDamageBase = 0, nDamageRand = 0, nCostMana = 0}, --level 7
	{nDamageBase = 0, nDamageRand = 0, nCostMana = 0}, --level 8
	{nDamageBase = 0, nDamageRand = 0, nCostMana = 0}, --level 9
	{nDamageBase = 0, nDamageRand = 0, nCostMana = 0}, --level 10
};

--设置武功技能级别相关数值
function GetSkillLevelData(skill)

	local dwSkillLevel = skill.dwLevel;

	----------------- 魔法属性 -------------------------------------------------
	--[[
   	skill.AddAttribute(
   		ATTRIBUTE_EFFECT_MODE.nAttributeEffectMode,					-- 属性作用模式
   		ATTRIBUTE_TYPE.nAttributeKey,								-- 魔法属性
   		nAttributeValue1,											-- 属性值1
   		nAttributeValue2											-- 属性值2
   		);
    --]]
	skill.AddAttribute(
		ATTRIBUTE_EFFECT_MODE.EFFECT_TO_DEST_NOT_ROLLBACK,
		ATTRIBUTE_TYPE.EXECUTE_SCRIPT,
		"skill/npc/地脉勘测-战斗技能/灵珠合体.lua", -- 属性值1
		0														-- 属性值2
	);
    	
	----------------- 技能施放Buff需求 ---------------------------------------------
	--skill.AddSlowCheckSelfBuff(dwBuffID, nStackNum, eCompareFlag, nLevel, eLevelCompareFlag);		-- 需求自身Buff
	--skill.AddSlowCheckDestBuff(dwBuffID, nStackNum, eCompareFlag, nLevel, eLevelCompareFlag);		-- 需求目标Buff
	--skill.AddSlowCheckSelfOwnBuff(dwBuffID, nStackNum, eCompareFlag, nLevel, eLevelCompareFlag);	-- 需求自身属于自己的Buff
	--skill.AddSlowCheckDestOwnBuff(dwBuffID, nStackNum, eCompareFlag, nLevel, eLevelCompareFlag);	-- 需求目标属于自己的Buff

	-----------------技能施放技能需求-------------------------------------------
	--skill.AddCheckSelfLearntSkill(dwSkillID, dwSkillLevel, LevelCompareFlag);     --检查比较Caster自己已学习的技能ID和等级

	-----------------技能施放姿态需求(苍云)----------------------------------------
	--skill.nNeedPoseState = 1    --检查姿态，1为擎刀姿态，2为擎盾姿态

	----------------技能伤害给小队回血------------------------------------------

	--skill.nDamageToLifeForParty = 0	--技能伤害给小队成员百分比回血

	-----------------技能渐变相关-------------------------------------------
	--skill.nAttackAttenuationCof = 0;     --技能伤害渐变百分比，1024为100%，正数为增加，负数为减少。注意此参数只能在渐变类型的AOE中使用！
	--skill.SetSubSkillForAreaDepth(1,dwSkillID,dwSkillLevel);  --对第一个搜索到的目标施放子技能。注意此参数只能在渐变类型的AOE中使用！
	--skill.SetSubSkillForAreaDepth(2,dwSkillID,dwSkillLevel);  --对第二个搜索到的目标施放子技能。
	--skill.SetSubSkillForAreaDepth(3,dwSkillID,dwSkillLevel);  --对第三个搜索到的目标施放子技能。
	--skill.SetSubSkillForAreaDepth(4,dwSkillID,dwSkillLevel);  --对第四个搜索到的目标施放子技能。
	--skill.SetSubSkillForAreaDepth(5,dwSkillID,dwSkillLevel);  --对第五个搜索到的目标施放子技能。
	--skill.SetSubSkillForAreaDepth(6,dwSkillID,dwSkillLevel);  --对第六个搜索到的目标施放子技能。
	--skill.SetSubSkillForAreaDepth(7,dwSkillID,dwSkillLevel);  --对第七个搜索到的目标施放子技能。
	--skill.SetSubSkillForAreaDepth(8,dwSkillID,dwSkillLevel);  --对第八个搜索到的目标施放子技能。
	--skill.SetSubSkillForAreaDepth(9,dwSkillID,dwSkillLevel);  --对第九个搜索到的目标施放子技能。
	--skill.SetSubSkillForAreaDepth(10,dwSkillID,dwSkillLevel);  --对第十个搜索到的目标施放子技能。

	----------------- BUFF相关 -------------------------------------------------
	--skill.BindBuff(1, 8757, 1)			-- 设置Buff
	--skill.BindBuff(2, nBuffID, nBuffLevel);		-- 设置2号位Buff
	--skill.BindBuff(3, nBuffID, nBuffLevel);		-- 设置3号位Buff
	--skill.BindBuff(4, nBuffID, nBuffLevel);		-- 设置4号位Buff

	----------------- 设置Cool down --------------------------------------------
	-- 公共CD
	--skill.SetPublicCoolDown(16);							-- 公共CD 1.5秒
	-- 技能CD, CoolDownIndex为CD位(共3个), nCoolDownID为CoolDownList.tab内的CDID
	--skill.SetNormalCoolDown(CoolDownIndex, nCoolDownID);	--技能普通CD
	--skill.SetCheckCoolDown(CoolDownIndex, nCoolDownID);	--只检查不走的CD
	----------------- 经验升级相关 ---------------------------------------------
	--注意,虽然这些内容可以在脚本内更改,但一般不做任何改动!
	--skill.dwLevelUpExp	= 0;    				-- 升级经验
	--skill.nExpAddOdds		= 1024;					-- 技能熟练度增长概率
	--skill.nPlayerLevelLimit	= 0;				-- 角色可以学会该技能所必须达到的最低等级

	----------------- 技能仇恨 -------------------------------------------------
	--skill.nBaseThreat		= 0;

	----------------- 技能是否可在吟唱中施放 -------------------------------------------------
	--skill.bIgnorePrepareState = true	--技能是否可在吟唱中施放，吟唱、通道、蓄力技不能填true

	----------------- 技能消耗 -------------------------------------------------
	--skill.nCostLife		= 0;									-- 技能消耗生命值
	--skill.nCostMana      	= tSkillData[dwSkillLevel].nCostMana;	-- 技能消耗的内力
	--skill.nCostStamina	= 0;									-- 技能消耗的体力
	--skill.nCostItemType	= 0;									-- 技能消耗的物品类型
	--skill.nCostItemIndex	= 0;									-- 技能消耗的物品索引ID

	----------------- 聚气相关 -------------------------------------------------
	--skill.bIsAccumulate	= false;				-- 技能是否需要聚气
	--skill.nNeedAccumulateCount = 0;				-- 技能需要气点的个数，当skill.bIsAccumulate	= true时生效
	--skill.SetSubsectionSkill(nBeginInterval, nEndInterval, dwSkillID, dwSkillLevel)

	----------------- 链状技能相关 ---------------------------------------------
	--skill.nChainBranch	= 1;					--链状技能分支数
	--skill.nChainDepth		= 3;					--链状技能层数
	--链状技能的子技能用skill.SetSubsectionSkill()设定

	----------------- 施放距离 -------------------------------------------------
	skill.nMinRadius = 0 * LENGTH_BASE;		-- 技能施放的最小距离
	skill.nMaxRadius = 30 * LENGTH_BASE;		-- 技能施放的最大距离

	----------------- 作用范围 -------------------------------------------------
	--skill.nProtectRadius = 0 * LENGTH_BASE;                     -- 环形和矩形AOE的保护距离，范围内不受伤害
	--skill.nHeight = 0 * LENGTH_BASE;                            -- AOE的高度，全高，圆柱体AOE中不填为2倍的nAreaRadius，矩形AOE中不填为nAreaRadius
	--skill.nRectWidth = 0 * LENGTH_BASE;                         -- 矩形AOE的宽度，全宽，不填为nAreaRadius
	skill.nAngleRange		= 256;					-- 攻击范围的扇形角度范围
	skill.nAreaRadius = 6 * LENGTH_BASE;		-- 技能作用半径
	skill.nTargetCountLimit = 10;				-- 技能作用目标数量限制,(小于0 代表目标数量不限制)

	----------------- 时间相关 -------------------------------------------------
	--skill.nPrepareFrames  	= 0;				-- 吟唱帧数
	--skill.nMinPrepareFrames  	= -1;				-- 急速效果最小吟唱帧数：默认是-1，吟唱不受急速影响。大于等于0则受急速影响，最小读条时间为填的值
	--skill.nChannelInterval	= 0; 				-- 通道技间隔时间
	--skill.nMinChannelInterval	= -1; 				-- 急速效果最小通道技间隔时间：默认是-1，通道不受急速影响。大于等于0则受急速影响，最通道间隔时间为填的值
	--skill.nChannelFrame		= 0;	 			-- 通道技持续时间，单位帧数
	--skill.nMinChannelFrame	= -1; 				-- 通常配合急速最小间隔时间使用。使得通道技能整体加速。如果这个填-1，间隔不是-1，高急速可以多1跳
	--skill.nBulletVelocity		= 0;				-- 子弹速度，单位 点/帧

	----------------- 阵法相关 -------------------------------------------------
	--skill.bIsFormationSkill	= false;			-- 是否阵眼技能
	--skill.nFormationRange		= 0 * LENGTH_BASE;	-- 结阵的范围
	--skill.nLeastFormationPopulation	= 2;		-- 结阵的范围的最少队员数（包括队长）

	----------------- 目标血量需求 ---------------------------------------------
	--skill.nTargetLifePercentMin	= 0;			-- 血量最小值>=
	--skill.nTargetLifePercentMax	= 100;			-- 血量最大值<=

	----------------- 自身血量需求 ---------------------------------------------
	--skill.nSelfLifePercentMin	= 0;				-- 血量最小值>=
	--skill.nSelfLifePercentMax	= 100;				-- 血量最大值<=

	----------------- 打退打断落马相关 -------------------------------------------------
	--skill.nBeatBackRate       = 1 * PERCENT_BASE;		-- 技能被打退的概率,默认1024
	--skill.nBrokenRate         = 1 * PERCENT_BASE;		-- 技能被打断的概率,默认1024
	--skill.nBreakRate			= 0 * PERCENT_BASE;		-- 打断目标施法的概率,基数1024

	--skill.nDismountingRate	= 0;					-- 将目标击落下马几率,基数1024，默认0

	----------------- 武器伤害相关 ---------------------------------------------
	skill.nWeaponDamagePercent = 0;			-- 武器伤害百分比,对外功伤害有用。填0表示此次外功攻击不计算武器伤害,1024为100%

	return true;
end

-- 对技能执行的特殊条件检查，该函数可以在开始施放技能的时候被调用，以确定是否可以施放该机能
-- Player: 技能施放者, nPreResult: 程序里面按照一般流程判断的结果
-- 注意，最终以脚本返回的结果为准
function CanCast(player, nPreResult)    --判断玩家的状态，以判断是否可以发出技能
	return nPreResult;
end

-- 技能升级时调用此函数，参数skill为升级后的skill，第一次获得某个技能时也调用此脚本
function OnSkillLevelUp(skill, player)

end

--技能遗忘时执行的函数,参数skill为遗忘的skill
function OnSkillForgotten(skill, player)

end
local dwTemplateID = 43294
--local tLive = {
--[44788] = 44789, --火 土
--[44789] = 44791, --土 金
--[44791] = 44715, --金 水
--[44715] = 44790, --水 木
--[44790] = 44788, --木 火
--}
--local tDie = {
--[44788] = 44791, --火 金
--[44789] = 44715, --土 水
--[44791] = 44790, --金 木
--[44715] = 44788, --水 火
--[44790] = 44789, --木 土
--}
local Ele_Gold = 1
local Ele_Wood = 2
local Ele_Water = 3
local Ele_Fire = 4
local Ele_Earth = 5

local tElementLive = {--自身被什么生
	[Ele_Gold] = Ele_Earth,
	[Ele_Wood] = Ele_Water,
	[Ele_Water] = Ele_Gold,
	[Ele_Fire] = Ele_Wood,
	[Ele_Earth] = Ele_Fire,
}
local tElementDie = {--自身克制谁
	[Ele_Gold] = Ele_Wood,
	[Ele_Wood] = Ele_Earth,
	[Ele_Water] = Ele_Fire,
	[Ele_Fire] = Ele_Gold,
	[Ele_Earth] = Ele_Water,
}
--local tEle = {--Element:1金，2木，3水
--[44821] = {Element = Ele_Gold,Level = 1,Die = tElementDie[Ele_Gold],Live = tElementLive[Ele_Gold]},--小金
--[44822] = {Element = Ele_Wood,Level = 1,Die = tElementDie[Ele_Wood],Live = tElementLive[Ele_Wood]},--小木
--[44823] = {Element = Ele_Water,Level = 1,Die = tElementDie[Ele_Water],Live = tElementLive[Ele_Water]},--小水
--[44824] = {Element = Ele_Fire,Level = 1,Die = tElementDie[Ele_Fire],Live = tElementLive[Ele_Fire]},--小火
--[44825] = {Element = Ele_Earth,Level = 1,Die = tElementDie[Ele_Earth],Live = tElementLive[Ele_Earth]}, --小土
--[44788] = {Element = Ele_Fire,Level = 2,Die = tElementDie[Ele_Fire],Live = tElementLive[Ele_Fire] }, --火 
--[44789] = {Element = Ele_Earth,Level = 2,Die = tElementDie[Ele_Earth],Live = tElementLive[Ele_Earth]},--土 
--[44791] = {Element = Ele_Gold,Level = 2,Die = tElementDie[Ele_Gold],Live = tElementLive[Ele_Gold]},--金 
--[44893] = {Element = Ele_Water,Level = 2,Die = tElementDie[Ele_Water],Live = tElementLive[Ele_Water]},--水 
--[44790] = {Element = Ele_Wood, Level = 2, Die = tElementDie[Ele_Wood], Live = tElementLive[Ele_Wood]}, --木
--}
local tEle = {--Element:1金，2木，3水
	[44821] = {Element = Ele_Gold,Level = 1},--小金
	[44822] = {Element = Ele_Wood,Level = 1},--小木
	[44823] = {Element = Ele_Water,Level = 1},--小水
	[44824] = {Element = Ele_Fire,Level = 1},--小火
	[44825] = {Element = Ele_Earth,Level = 1}, --小土
	[44788] = {Element = Ele_Fire,Level = 2}, --火 
	[44789] = {Element = Ele_Earth,Level = 2},--土 
	[44791] = {Element = Ele_Gold,Level = 2},--金 
	[44893] = {Element = Ele_Water,Level = 2},--水 
	[44790] = {Element = Ele_Wood, Level = 2}, --木
	
	[44890] = {Element = Ele_Gold,Level = 3},--大金
	[44889] = {Element = Ele_Wood,Level = 3},--大木
	[44888] = {Element = Ele_Water,Level = 3},--大水
	[44887] = {Element = Ele_Fire,Level = 3},--大火
	[44886] = {Element = Ele_Earth,Level = 3}, --大土

}
for i, v in pairs(tEle) do--自动写入升级的表现ID
	v.Die = tElementDie[v.Element]
	v.Live = tElementLive[v.Element]
	--print(i)
	--print(v.Element)
	--print(v.Die)
	--print(v.Live)
end
for i, v1 in pairs(tEle) do--自动写入升级的表现ID
	for j, v2 in pairs(tEle) do
		if v1.Element == v2.Element and v1.Level + 1 == v2.Level then
			v1.UpGrade = j
		end
	end
end

--for i, v1 in pairs(tEle) do
--print(v1.UpGrade)
--end
--local tSmall = {
--[44821] = {Die = {44822},Live = {44823},Upgrade = 44791,},--小金
--[44822] = {Die ={44825},Live = {44824},Upgrade = 44790,},--小木
--[44823] = {Die ={44824},Live = {44822},Upgrade = 44715,},--小水
--[44824] = {Die ={44822},Live = {44825},Upgrade = 44788,},--小火
--[44825] = {Die = {44823}, Live = {44821}, Upgrade = 44789, }, --小土
--[44788] = {Live = {44789,}, Die = {44791},Destroy = }, --火 
--[44789] = {Live = {44791,}, Die = {44715},},--土 
--[44791] = {Live = {44715,}, Die = {44790},},--金 
--[44715] = {Live = {44790,}, Die = {44788},},--水 
--[44790] = {Live = {44788,}, Die = {44789},}, --木 
--}
--魔法属性应用时的执行函数,dwCharacterID是魔法属性作用的目标ID
local dwSFXID = 718
function Apply(dwCharacterID, dwSourceID)
	--if dwCharacterID ~= dwTemplateID or dwSourceID ~= dwTemplateID then
	--print(dwCharacterID)
	--print(dwSourceID)
	--print(2)
	--return
	--end

	local target = GetNpc(dwCharacterID)--目标
	local self = GetNpc(dwSourceID)
	if not target or not self then
		return
	end
	if target.dwTemplateID ~= self.dwTemplateID then
		return
	end
	local tEleSlef = tEle[self.dwModelID]
	local tEleTarget = tEle[target.dwModelID]
	if tEleSlef.Live == tEleTarget.Element then--相生
		if tEleSlef.UpGrade then
			target.PlaySfx(dwSFXID, target.nX, target.nY, target.nZ)
			target.Die()
			self.PlaySfx(dwSFXID, self.nX, self.nY, self.nZ)
			self.SetModelID(tEleSlef.UpGrade)
			self.AddBuff(1, 1, 9015, 1, 30)
		end
		if tEleTarget.Level - tEleSlef.Level > 0 then--如果有等级差，增加升级次数
			for i = 1, tEleTarget.Level - tEleSlef.Level do
				tEleSlef = tEle[self.dwModelID]
				if tEleSlef.UpGrade then
					self.SetModelID(tEleSlef.UpGrade)
				end	
			end
		end
	end
	if tEleSlef.Die == tEleTarget.Element then--相克

		if tEleSlef.Level > tEleTarget.Level then
			target.PlaySfx(dwSFXID, target.nX, target.nY, target.nZ)
			target.Die()
		elseif tEleSlef.Level < tEleTarget.Level then
			self.PlaySfx(dwSFXID, self.nX, self.nY, self.nZ)
			self.Die()
		else
			target.PlaySfx(dwSFXID, target.nX, target.nY, target.nZ)
			target.Die()
			self.PlaySfx(dwSFXID, self.nX, self.nY, self.nZ)
			self.Die()
			
		end
	end
	--	print(self.dwModelID)
	--	print(target.dwModelID)
end

--魔法属性反应用时的执行函数,dwCharacterID是魔法属性作用的目标ID
function UnApply(dwCharacterID)
end
 -- by 每天涨停@梦江南 $ Jx3UnPack-PAKV3 jx3.mail@gmail.com